
USE SCHEMA MART_DQM;

-- Deleting and inserting WORK_WPD_TRAINS
DELETE FROM WORK_WPD_TRAINS;
INSERT INTO WORK_WPD_TRAINS (
        EVENT_ID,
        DETECTOR_OWNER,
        DETECTOR_ID,
        DETECTOR_UID,
        TRAIN_DATE,
        TRAIN_DIRECTION,
        TRAIN_SPEED,
        TRAIN_AXLE_CNT,
        CAR_AXLE_CNT
    )
SELECT DTP.EVENT_ID,
    D.CARRIER_MARK_NAME AS DETECTOR_OWNER,
    D.CARRIER_DETECTOR_ID AS DETECTOR_ID,
    D.DETECTOR_ID AS DETECTOR_UID,
    DTP.TRAIN_ENTRANCE_TS AS TRAIN_DATE,
    DTP.TRAIN_DIRECTION,
    DTP.TRAIN_ENTRANCE_SPEED_MPH AS TRAIN_SPEED,
    DTP.TRAIN_AXLE_CNT,
    DTP.CAR_AXLE_CNT
FROM DETECTOR_TRAIN_PASS_VW DTP,
    DETECTOR_VW D
WHERE DTP.TRAIN_ENTRANCE_TS >= TRUNC(TO_DATE('${START_DATE1WK}', 'YYYYMMDD'), 'DAY')
    AND DTP.TRAIN_ENTRANCE_TS < TRUNC(TO_DATE('${END_DATE}', 'YYYYMMDD'), 'DAY')
    AND DTP.DETECTOR_ID = D.DETECTOR_ID
    AND D.DETECTOR_TYPE_CODE = 'WPD'
    AND D.EXPIRATION_TS > SYSDATE();

-- Deleting and inserting DQM_WPD_DATA_TRAINS
DELETE FROM DQM_WPD_DATA_TRAINS
WHERE TRAIN_DATE >= TO_DATE('${KPIDATE1WK}', 'YYYYMMDD')
    AND TRAIN_DATE < TO_DATE('${KPIDATE}', 'YYYYMMDD');
INSERT INTO DQM_WPD_DATA_TRAINS (
        EVENT_ID,
        DETECTOR_OWNER,
        DETECTOR_ID,
        DETECTOR_UID,
        TRAIN_DATE,
        TRAIN_DIRECTION,
        TRAIN_SPEED,
        TRAIN_AXLE_CNT,
        CAR_AXLE_CNT
    )
SELECT *
FROM WORK_WPD_TRAINS;
DELETE FROM DQM_WPD_DATA_TRAINS
WHERE DETECTOR_UID = 'f08150ed-0d24-4330-97f8-f423e04b2d87'
    AND TRAIN_DIRECTION IN ('E', 'W');
DELETE FROM DQM_WPD_DATA_TRAINS
WHERE DETECTOR_UID = '25424f32-d98a-41e2-871b-fd3a908e132f'
    AND TRAIN_DIRECTION IN ('N', 'S');

-- Deleting and inserting WORK_WPD_EQUIPMENT
DELETE FROM WORK_WPD_EQUIPMENT;
INSERT INTO WORK_WPD_EQUIPMENT (
        EVENT_ID,
        EVENT_EQUIP_ID,
        EQUIP_INITIAL,
        EQUIP_NUMBER,
        EQUIP_TYPE,
        GROSS_WEIGHT
    )
SELECT DTP.EVENT_ID,
    TEE.EVENT_EQUIP_ID,
    TEE.EQUIP_UNIT_INIT_CODE AS EQUIP_INITIAL,
    TEE.EQUIP_UNIT_NBR AS EQUIP_NUMBER,
    E.EQUIP_GROUP AS EQUIP_TYPE,
    E.GROSS_WEIGHT_AMT AS GROSS_WEIGHT
FROM DETECTOR_TRAIN_PASS_VW DTP,
    TRAIN_EVENT_EQUIPMENT_VW TEE
    LEFT OUTER JOIN UMLER_FLATTEN_CURR_VW E ON TEE.EQUIP_UNIT_INIT_CODE = RTRIM(E.EQUIP_UNIT_INIT_CODE)
    AND TEE.EQUIP_UNIT_NBR = E.EQUIP_UNIT_NBR
    AND E.EXPIRATION_TS > SYSDATE()
    AND E.STATUS_CODE = 'A'
WHERE DTP.TRAIN_ENTRANCE_TS >= TRUNC(TO_DATE('${START_DATE1WK}', 'YYYYMMDD'), 'DAY')
    AND DTP.TRAIN_ENTRANCE_TS < TRUNC(TO_DATE('${END_DATE}', 'YYYYMMDD'), 'DAY')
    AND DTP.DETECTOR_TYPE_CODE = 'WPD'
    AND DTP.EVENT_ID = TEE.EVENT_ID;

-- Deleting and inserting DQM_WPD_DATA_EQUIPMENT
DELETE FROM DQM_WPD_DATA_EQUIPMENT
WHERE EVENT_ID IN (
        SELECT EVENT_ID
        FROM DQM_WPD_DATA_TRAINS
        WHERE TRAIN_DATE >= TO_DATE('${KPIDATE1WK}', 'YYYYMMDD')
            AND TRAIN_DATE < TO_DATE('${KPIDATE}', 'YYYYMMDD')
    );
INSERT INTO DQM_WPD_DATA_EQUIPMENT (
        EVENT_ID,
        EVENT_EQUIP_ID,
        EQUIP_INITIAL,
        EQUIP_NUMBER,
        EQUIP_TYPE,
        GROSS_WEIGHT
    )
SELECT *
FROM WORK_WPD_EQUIPMENT;

-- Deleting and inserting WORK_WPD_READINGS
DELETE FROM WORK_WPD_READINGS;
INSERT INTO WORK_WPD_READINGS (
        EVENT_ID,
        EVENT_EQUIP_ID,
        AXLE_NUMBER,
        EQUIP_SIDE,
        WHEEL_DIAMETER,
        WHEEL_WIDTH,
        FLANGE_HEIGHT,
        FLANGE_THICKNESS,
        RIM_THICKNESS,
        TREAD_HOLLOW,
        BACK_TO_BACK_GAUGE,
        TRAIN_SIDE
    )
SELECT DTP.EVENT_ID,
    DAMR.EVENT_EQUIP_ID,
    DAMR.EQUIP_AXLE_SEQ_NBR AS AXLE_NUMBER,
    DAMR.EQUIP_SIDE_CODE AS EQUIP_SIDE,
    WRD.WHEEL_DIAMETER,
    WRD.WHEEL_WIDTH,
    WRD.FLANGE_HEIGHT,
    WRD.FLANGE_THICKNESS,
    WRD.RIM_THICKNESS,
    WRD.TREAD_HOLLOW,
    WRD.BACK_TO_BACK_GAUGE,
    DAMR.TRAIN_SIDE_CODE AS TRAIN_SIDE
FROM DETECTOR_TRAIN_PASS_VW DTP,
    DETECTOR_AXLE_MATCHED_READ_VW DAMR,
    DETCTR_AXLE_WPD_MATCH_RD_VW WRD
WHERE DTP.TRAIN_ENTRANCE_TS >= TRUNC(TO_DATE('${START_DATE1WK}', 'YYYYMMDD'), 'DAY')
    AND DTP.TRAIN_ENTRANCE_TS < TRUNC(TO_DATE('${END_DATE}', 'YYYYMMDD'), 'DAY')
    AND DTP.DETECTOR_TYPE_CODE = 'WPD'
    AND DTP.EVENT_ID = DAMR.EVENT_ID
    AND DAMR.DETECTOR_AXLE_READ_ID = WRD.DETECTOR_AXLE_READ_ID
ORDER BY WRD.DETECTOR_AXLE_READ_ID;

-- Deleting and inserting DQM_WPD_DATA_READINGS
DELETE FROM DQM_WPD_DATA_READINGS
WHERE EVENT_ID IN (
        SELECT EVENT_ID
        FROM DQM_WPD_DATA_TRAINS
        WHERE TRAIN_DATE >= TO_DATE('${KPIDATE1WK}', 'YYYYMMDD')
            AND TRAIN_DATE < TO_DATE('${KPIDATE}', 'YYYYMMDD')
    );
INSERT INTO DQM_WPD_DATA_READINGS (
        EVENT_ID,
        EVENT_EQUIP_ID,
        AXLE_NUMBER,
        EQUIP_SIDE,
        WHEEL_DIAMETER,
        WHEEL_WIDTH,
        FLANGE_HEIGHT,
        FLANGE_THICKNESS,
        RIM_THICKNESS,
        TREAD_HOLLOW,
        BACK_TO_BACK_GAUGE,
        TRAIN_SIDE
    )
SELECT *
FROM WORK_WPD_READINGS;

-- Deleting and inserting WORK_WPD_REPAIRS
DELETE FROM WORK_WPD_REPAIRS;
INSERT INTO WORK_WPD_REPAIRS (
        EVENT_ID,
        EVENT_EQUIP_ID,
        AXLE_NUMBER,
        REPAIR_DATE
    )
SELECT E.EVENT_ID,
    E.EVENT_EQUIP_ID,
    C.AXLE_NUMBER,
    TRUNC(C.CLOSURE_DATE, 'DAY') AS REPAIR_DATE
FROM (
        SELECT DTP.EVENT_ID,
            TEE.EVENT_EQUIP_ID,
            TRUNC(DTP.TRAIN_ENTRANCE_TS, 'DAY') AS TRAIN_DATE,
            TEE.EQUIP_UNIT_INIT_CODE AS EQUIP_INITIAL,
            TEE.EQUIP_UNIT_NBR AS EQUIP_NUMBER
        FROM DETECTOR_TRAIN_PASS_VW DTP,
            TRAIN_EVENT_EQUIPMENT_VW TEE
        WHERE DTP.TRAIN_ENTRANCE_TS >= TRUNC(TO_DATE('${START_DATE1WK}', 'YYYYMMDD'), 'DAY')
            AND DTP.TRAIN_ENTRANCE_TS < TRUNC(TO_DATE('${END_DATE}', 'YYYYMMDD'), 'DAY')
            AND DTP.DETECTOR_TYPE_CODE = 'WPD'
            AND DTP.EVENT_ID = TEE.EVENT_ID
    ) E
    LEFT OUTER JOIN (
        SELECT C.EQUIP_INITIAL,
            C.EQUIP_NUMBER,
            CAST(CLA.LOCATION_VALUE AS INT) AS AXLE_NUMBER,
            C.CLOSURE_DATE
        FROM CLOSURES_VW C,
            COMPONENT_LOCATION_VALUES_VW CLA
        WHERE C.CREATED_TIMESTAMP > TRUNC(TO_DATE('${START_DATE1WK}', 'YYYYMMDD'), 'DAY')
            AND C.ACTIVE = 1
            AND C.CLOSURE_TYPE = 'REPAIR'
            AND C.COMPONENT_LOCATION_ID = CLA.COMPONENT_LOCATION_ID
            AND CLA.IDENTIFIER_CODE = 'AXLE'
    ) C ON E.EQUIP_INITIAL = C.EQUIP_INITIAL
    AND E.EQUIP_NUMBER = C.EQUIP_NUMBER
    AND E.TRAIN_DATE < C.CLOSURE_DATE;

-- Deleting and inserting DQM_WPD_DATA_REPAIRS
DELETE FROM DQM_WPD_DATA_REPAIRS
WHERE EVENT_ID IN (
        SELECT EVENT_ID
        FROM DQM_WPD_DATA_TRAINS
        WHERE TRAIN_DATE >= TO_DATE('${KPIDATE1WK}', 'YYYYMMDD')
            AND TRAIN_DATE < TO_DATE('${KPIDATE}', 'YYYYMMDD')
    );
INSERT INTO DQM_WPD_DATA_REPAIRS (
        EVENT_ID,
        EVENT_EQUIP_ID,
        AXLE_NUMBER,
        REPAIR_DATE
    )
SELECT *
FROM WORK_WPD_REPAIRS;

-- Deleting and inserting WORK_WPD_FUTURE_TIMESTAMPS
DELETE FROM WORK_WPD_FUTURE_TIMESTAMPS;
INSERT INTO WORK_WPD_FUTURE_TIMESTAMPS (
        DETECTOR_UID,
        CARRIER_MARK_NAME,
        CARRIER_DETECTOR_ID,
        DETECTOR_SITE_NAME,
        COUNT_FUTURE
    )
SELECT D.DETECTOR_ID AS DETECTOR_UID,
    D.CARRIER_MARK_NAME,
    D.CARRIER_DETECTOR_ID,
    D.DETECTOR_SITE_NAME,
    COUNT(*) AS COUNT_FUTURE
FROM DETECTOR_VW D,
    DATA_SUMMARY_SOURCE_EVENTS_VW DSE
WHERE DSE.RETRY_STATE = 'DROPPED_FUTURE'
    AND DSE.CREATED_TS >= TRUNC(TO_DATE('${END_DATE}', 'YYYYMMDD') -3, 'DAY')
    AND DSE.CREATED_TS < TRUNC(TO_DATE('${END_DATE}', 'YYYYMMDD'), 'DAY')
    AND DSE.SOURCE_EVENT_TYPE = 'WheelProfileRead'
    AND DSE.DETECTOR_ID = D.DETECTOR_ID
    AND D.EXPIRATION_TS > SYSDATE()
    AND D.CARRIER_MARK_NAME IN ('BNSF', 'CN', 'CP', 'CSXT', 'KCS', 'NS', 'UP')
GROUP BY D.DETECTOR_ID,
    D.CARRIER_MARK_NAME,
    D.CARRIER_DETECTOR_ID,
    D.DETECTOR_SITE_NAME;

-- Deleting and inserting DQM_WPD_DATA_FUTURE
DELETE FROM DQM_WPD_DATA_FUTURE;
INSERT INTO DQM_WPD_DATA_FUTURE (
        DETECTOR_UID,
        CARRIER_MARK_NAME,
        CARRIER_DETECTOR_ID,
        DETECTOR_SITE_NAME,
        COUNT_FUTURE
    )
SELECT *
FROM WORK_WPD_FUTURE_TIMESTAMPS;